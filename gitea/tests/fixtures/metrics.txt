# HELP gitea_accesses Number of Accesses
# TYPE gitea_accesses gauge
gitea_accesses 1
# HELP gitea_actions Number of Actions
# TYPE gitea_actions gauge
gitea_actions 2
# HELP gitea_attachments Number of Attachments
# TYPE gitea_attachments gauge
gitea_attachments 3
# HELP gitea_comments Number of Comments
# TYPE gitea_comments gauge
gitea_comments 4
# HELP gitea_follows Number of Follows
# TYPE gitea_follows gauge
gitea_follows 5
# HELP gitea_hooktasks Number of HookTasks
# TYPE gitea_hooktasks gauge
gitea_hooktasks 6
# HELP gitea_issues Number of Issues
# TYPE gitea_issues gauge
gitea_issues 7
# HELP gitea_issues_closed Number of closed Issues
# TYPE gitea_issues_closed gauge
gitea_issues_closed 8
# HELP gitea_issues_open Number of open Issues
# TYPE gitea_issues_open gauge
gitea_issues_open 9
# HELP gitea_labels Number of Labels
# TYPE gitea_labels gauge
gitea_labels 10
# HELP gitea_loginsources Number of LoginSources
# TYPE gitea_loginsources gauge
gitea_loginsources 11
# HELP gitea_milestones Number of Milestones
# TYPE gitea_milestones gauge
gitea_milestones 12
# HELP gitea_mirrors Number of Mirrors
# TYPE gitea_mirrors gauge
gitea_mirrors 13
# HELP gitea_oauths Number of Oauths
# TYPE gitea_oauths gauge
gitea_oauths 14
# HELP gitea_organizations Number of Organizations
# TYPE gitea_organizations gauge
gitea_organizations 15
# HELP gitea_projects Number of projects
# TYPE gitea_projects gauge
gitea_projects 16
# HELP gitea_projects_boards Number of project boards
# TYPE gitea_projects_boards gauge
gitea_projects_boards 17
# HELP gitea_publickeys Number of PublicKeys
# TYPE gitea_publickeys gauge
gitea_publickeys 18
# HELP gitea_releases Number of Releases
# TYPE gitea_releases gauge
gitea_releases 19
# HELP gitea_repositories Number of Repositories
# TYPE gitea_repositories gauge
gitea_repositories 20
# HELP gitea_stars Number of Stars
# TYPE gitea_stars gauge
gitea_stars 21
# HELP gitea_teams Number of Teams
# TYPE gitea_teams gauge
gitea_teams 22
# HELP gitea_updatetasks Number of UpdateTasks
# TYPE gitea_updatetasks gauge
gitea_updatetasks 23
# HELP gitea_users Number of Users
# TYPE gitea_users gauge
gitea_users 24
# HELP gitea_watches Number of Watches
# TYPE gitea_watches gauge
gitea_watches 25
# HELP gitea_webhooks Number of Webhooks
# TYPE gitea_webhooks gauge
gitea_webhooks 26
# HELP go_gc_cycles_automatic_gc_cycles_total Count of completed GC cycles generated by the Go runtime.
# TYPE go_gc_cycles_automatic_gc_cycles_total counter
go_gc_cycles_automatic_gc_cycles_total 13
# HELP go_gc_cycles_forced_gc_cycles_total Count of completed GC cycles forced by the application.
# TYPE go_gc_cycles_forced_gc_cycles_total counter
go_gc_cycles_forced_gc_cycles_total 0
# HELP go_gc_cycles_total_gc_cycles_total Count of all completed GC cycles.
# TYPE go_gc_cycles_total_gc_cycles_total counter
go_gc_cycles_total_gc_cycles_total 13
# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile="0"} 5.479e-05
go_gc_duration_seconds{quantile="0.25"} 0.000122067
go_gc_duration_seconds{quantile="0.5"} 0.000176358
go_gc_duration_seconds{quantile="0.75"} 0.000482041
go_gc_duration_seconds{quantile="1"} 0.00078584
go_gc_duration_seconds_sum 0.003863406
go_gc_duration_seconds_count 13
# HELP go_gc_heap_allocs_by_size_bytes_total Distribution of heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_allocs_by_size_bytes_total histogram
go_gc_heap_allocs_by_size_bytes_total_bucket{le="8.999999999999998"} 45533
go_gc_heap_allocs_by_size_bytes_total_bucket{le="24.999999999999996"} 277142
go_gc_heap_allocs_by_size_bytes_total_bucket{le="64.99999999999999"} 672228
go_gc_heap_allocs_by_size_bytes_total_bucket{le="144.99999999999997"} 855475
go_gc_heap_allocs_by_size_bytes_total_bucket{le="320.99999999999994"} 890237
go_gc_heap_allocs_by_size_bytes_total_bucket{le="704.9999999999999"} 899410
go_gc_heap_allocs_by_size_bytes_total_bucket{le="1536.9999999999998"} 904436
go_gc_heap_allocs_by_size_bytes_total_bucket{le="3200.9999999999995"} 908086
go_gc_heap_allocs_by_size_bytes_total_bucket{le="6528.999999999999"} 910821
go_gc_heap_allocs_by_size_bytes_total_bucket{le="13568.999999999998"} 911841
go_gc_heap_allocs_by_size_bytes_total_bucket{le="27264.999999999996"} 912297
go_gc_heap_allocs_by_size_bytes_total_bucket{le="+Inf"} 913741
go_gc_heap_allocs_by_size_bytes_total_sum 1.90383072e+08
go_gc_heap_allocs_by_size_bytes_total_count 913741
# HELP go_gc_heap_allocs_bytes_total Cumulative sum of memory allocated to the heap by the application.
# TYPE go_gc_heap_allocs_bytes_total counter
go_gc_heap_allocs_bytes_total 1.90383072e+08
# HELP go_gc_heap_allocs_objects_total Cumulative count of heap allocations triggered by the application. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_allocs_objects_total counter
go_gc_heap_allocs_objects_total 913741
# HELP go_gc_heap_frees_by_size_bytes_total Distribution of freed heap allocations by approximate size. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_frees_by_size_bytes_total histogram
go_gc_heap_frees_by_size_bytes_total_bucket{le="8.999999999999998"} 4907
go_gc_heap_frees_by_size_bytes_total_bucket{le="24.999999999999996"} 125407
go_gc_heap_frees_by_size_bytes_total_bucket{le="64.99999999999999"} 262703
go_gc_heap_frees_by_size_bytes_total_bucket{le="144.99999999999997"} 315580
go_gc_heap_frees_by_size_bytes_total_bucket{le="320.99999999999994"} 336346
go_gc_heap_frees_by_size_bytes_total_bucket{le="704.9999999999999"} 342613
go_gc_heap_frees_by_size_bytes_total_bucket{le="1536.9999999999998"} 345988
go_gc_heap_frees_by_size_bytes_total_bucket{le="3200.9999999999995"} 348624
go_gc_heap_frees_by_size_bytes_total_bucket{le="6528.999999999999"} 350320
go_gc_heap_frees_by_size_bytes_total_bucket{le="13568.999999999998"} 350911
go_gc_heap_frees_by_size_bytes_total_bucket{le="27264.999999999996"} 351117
go_gc_heap_frees_by_size_bytes_total_bucket{le="+Inf"} 352232
go_gc_heap_frees_by_size_bytes_total_sum 1.02149504e+08
go_gc_heap_frees_by_size_bytes_total_count 352232
# HELP go_gc_heap_frees_bytes_total Cumulative sum of heap memory freed by the garbage collector.
# TYPE go_gc_heap_frees_bytes_total counter
go_gc_heap_frees_bytes_total 1.02149504e+08
# HELP go_gc_heap_frees_objects_total Cumulative count of heap allocations whose storage was freed by the garbage collector. Note that this does not include tiny objects as defined by /gc/heap/tiny/allocs:objects, only tiny blocks.
# TYPE go_gc_heap_frees_objects_total counter
go_gc_heap_frees_objects_total 352232
# HELP go_gc_heap_goal_bytes Heap size target for the end of the GC cycle.
# TYPE go_gc_heap_goal_bytes gauge
go_gc_heap_goal_bytes 1.76839808e+08
# HELP go_gc_heap_objects_objects Number of objects, live or unswept, occupying heap memory.
# TYPE go_gc_heap_objects_objects gauge
go_gc_heap_objects_objects 561509
# HELP go_gc_heap_tiny_allocs_objects_total Count of small allocations that are packed together into blocks. These allocations are counted separately from other allocations because each individual allocation is not tracked by the runtime, only their block. Each block is already accounted for in allocs-by-size and frees-by-size.
# TYPE go_gc_heap_tiny_allocs_objects_total counter
go_gc_heap_tiny_allocs_objects_total 34707
# HELP go_gc_pauses_seconds_total Distribution individual GC-related stop-the-world pause latencies.
# TYPE go_gc_pauses_seconds_total histogram
go_gc_pauses_seconds_total_bucket{le="-5e-324"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999999e-10"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999999e-09"} 0
go_gc_pauses_seconds_total_bucket{le="9.999999999999998e-08"} 0
go_gc_pauses_seconds_total_bucket{le="1.0239999999999999e-06"} 0
go_gc_pauses_seconds_total_bucket{le="1.0239999999999999e-05"} 4
go_gc_pauses_seconds_total_bucket{le="0.00010239999999999998"} 17
go_gc_pauses_seconds_total_bucket{le="0.0010485759999999998"} 26
go_gc_pauses_seconds_total_bucket{le="0.010485759999999998"} 26
go_gc_pauses_seconds_total_bucket{le="0.10485759999999998"} 26
go_gc_pauses_seconds_total_bucket{le="+Inf"} 26
go_gc_pauses_seconds_total_sum NaN
go_gc_pauses_seconds_total_count 26
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 32
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version="go1.18.2"} 1
# HELP go_memory_classes_heap_free_bytes Memory that is completely free and eligible to be returned to the underlying system, but has not been. This metric is the runtime's estimate of free address space that is backed by physical memory.
# TYPE go_memory_classes_heap_free_bytes gauge
go_memory_classes_heap_free_bytes 1.0338304e+07
# HELP go_memory_classes_heap_objects_bytes Memory occupied by live objects and dead objects that have not yet been marked free by the garbage collector.
# TYPE go_memory_classes_heap_objects_bytes gauge
go_memory_classes_heap_objects_bytes 8.8233568e+07
# HELP go_memory_classes_heap_released_bytes Memory that is completely free and has been returned to the underlying system. This metric is the runtime's estimate of free address space that is still mapped into the process, but is not backed by physical memory.
# TYPE go_memory_classes_heap_released_bytes gauge
go_memory_classes_heap_released_bytes 3.1678464e+07
# HELP go_memory_classes_heap_stacks_bytes Memory allocated from the heap that is reserved for stack space, whether or not it is currently in-use.
# TYPE go_memory_classes_heap_stacks_bytes gauge
go_memory_classes_heap_stacks_bytes 1.015808e+06
# HELP go_memory_classes_heap_unused_bytes Memory that is reserved for heap objects but is not currently used to hold heap objects.
# TYPE go_memory_classes_heap_unused_bytes gauge
go_memory_classes_heap_unused_bytes 1.5534496e+07
# HELP go_memory_classes_metadata_mcache_free_bytes Memory that is reserved for runtime mcache structures, but not in-use.
# TYPE go_memory_classes_metadata_mcache_free_bytes gauge
go_memory_classes_metadata_mcache_free_bytes 10800
# HELP go_memory_classes_metadata_mcache_inuse_bytes Memory that is occupied by runtime mcache structures that are currently being used.
# TYPE go_memory_classes_metadata_mcache_inuse_bytes gauge
go_memory_classes_metadata_mcache_inuse_bytes 4800
# HELP go_memory_classes_metadata_mspan_free_bytes Memory that is reserved for runtime mspan structures, but not in-use.
# TYPE go_memory_classes_metadata_mspan_free_bytes gauge
go_memory_classes_metadata_mspan_free_bytes 208080
# HELP go_memory_classes_metadata_mspan_inuse_bytes Memory that is occupied by runtime mspan structures that are currently being used.
# TYPE go_memory_classes_metadata_mspan_inuse_bytes gauge
go_memory_classes_metadata_mspan_inuse_bytes 983280
# HELP go_memory_classes_metadata_other_bytes Memory that is reserved for or used to hold runtime metadata.
# TYPE go_memory_classes_metadata_other_bytes gauge
go_memory_classes_metadata_other_bytes 1.1089736e+07
# HELP go_memory_classes_os_stacks_bytes Stack memory allocated by the underlying operating system.
# TYPE go_memory_classes_os_stacks_bytes gauge
go_memory_classes_os_stacks_bytes 0
# HELP go_memory_classes_other_bytes Memory used by execution trace buffers, structures for debugging the runtime, finalizer and profiler specials, and more.
# TYPE go_memory_classes_other_bytes gauge
go_memory_classes_other_bytes 722774
# HELP go_memory_classes_profiling_buckets_bytes Memory that is used by the stack trace hash map used for profiling.
# TYPE go_memory_classes_profiling_buckets_bytes gauge
go_memory_classes_profiling_buckets_bytes 1.520346e+06
# HELP go_memory_classes_total_bytes All memory mapped by the Go runtime into the current process as read-write. Note that this does not include memory mapped by code called via cgo or via the syscall package. Sum of all metrics in /memory/classes.
# TYPE go_memory_classes_total_bytes gauge
go_memory_classes_total_bytes 1.61340456e+08
# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.
# TYPE go_memstats_alloc_bytes gauge
go_memstats_alloc_bytes 8.8233568e+07
# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.
# TYPE go_memstats_alloc_bytes_total counter
go_memstats_alloc_bytes_total 1.90383072e+08
# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.
# TYPE go_memstats_buck_hash_sys_bytes gauge
go_memstats_buck_hash_sys_bytes 1.520346e+06
# HELP go_memstats_frees_total Total number of frees.
# TYPE go_memstats_frees_total counter
go_memstats_frees_total 386939
# HELP go_memstats_gc_cpu_fraction The fraction of this program's available CPU time used by the GC since the program started.
# TYPE go_memstats_gc_cpu_fraction gauge
go_memstats_gc_cpu_fraction 0
# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.
# TYPE go_memstats_gc_sys_bytes gauge
go_memstats_gc_sys_bytes 1.1089736e+07
# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.
# TYPE go_memstats_heap_alloc_bytes gauge
go_memstats_heap_alloc_bytes 8.8233568e+07
# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.
# TYPE go_memstats_heap_idle_bytes gauge
go_memstats_heap_idle_bytes 4.2016768e+07
# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.
# TYPE go_memstats_heap_inuse_bytes gauge
go_memstats_heap_inuse_bytes 1.03768064e+08
# HELP go_memstats_heap_objects Number of allocated objects.
# TYPE go_memstats_heap_objects gauge
go_memstats_heap_objects 561509
# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.
# TYPE go_memstats_heap_released_bytes gauge
go_memstats_heap_released_bytes 3.1678464e+07
# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.
# TYPE go_memstats_heap_sys_bytes gauge
go_memstats_heap_sys_bytes 1.45784832e+08
# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.
# TYPE go_memstats_last_gc_time_seconds gauge
go_memstats_last_gc_time_seconds 1.654456214601557e+09
# HELP go_memstats_lookups_total Total number of pointer lookups.
# TYPE go_memstats_lookups_total counter
go_memstats_lookups_total 0
# HELP go_memstats_mallocs_total Total number of mallocs.
# TYPE go_memstats_mallocs_total counter
go_memstats_mallocs_total 948448
# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.
# TYPE go_memstats_mcache_inuse_bytes gauge
go_memstats_mcache_inuse_bytes 4800
# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.
# TYPE go_memstats_mcache_sys_bytes gauge
go_memstats_mcache_sys_bytes 15600
# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.
# TYPE go_memstats_mspan_inuse_bytes gauge
go_memstats_mspan_inuse_bytes 983280
# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.
# TYPE go_memstats_mspan_sys_bytes gauge
go_memstats_mspan_sys_bytes 1.19136e+06
# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.
# TYPE go_memstats_next_gc_bytes gauge
go_memstats_next_gc_bytes 1.76839808e+08
# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.
# TYPE go_memstats_other_sys_bytes gauge
go_memstats_other_sys_bytes 722774
# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.
# TYPE go_memstats_stack_inuse_bytes gauge
go_memstats_stack_inuse_bytes 1.015808e+06
# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.
# TYPE go_memstats_stack_sys_bytes gauge
go_memstats_stack_sys_bytes 1.015808e+06
# HELP go_memstats_sys_bytes Number of bytes obtained from system.
# TYPE go_memstats_sys_bytes gauge
go_memstats_sys_bytes 1.61340456e+08
# HELP go_sched_goroutines_goroutines Count of live goroutines.
# TYPE go_sched_goroutines_goroutines gauge
go_sched_goroutines_goroutines 33
# HELP go_sched_latencies_seconds Distribution of the time goroutines have spent in the scheduler in a runnable state before actually running.
# TYPE go_sched_latencies_seconds histogram
go_sched_latencies_seconds_bucket{le="1"} 0
go_sched_latencies_seconds_bucket{le="2"} 757
go_sched_latencies_seconds_bucket{le="3"} 757
go_sched_latencies_seconds_bucket{le="4"} 883
go_sched_latencies_seconds_bucket{le="5"} 30494
go_sched_latencies_seconds_bucket{le="6"} 33417
go_sched_latencies_seconds_bucket{le="7"} 35057
go_sched_latencies_seconds_bucket{le="8"} 35165
go_sched_latencies_seconds_bucket{le="9"} 35169
go_sched_latencies_seconds_bucket{le="10"} 35169
go_sched_latencies_seconds_bucket{le="+Inf"} 35169
go_sched_latencies_seconds_sum NaN
go_sched_latencies_seconds_count 35169
# HELP go_threads Number of OS threads created.
# TYPE go_threads gauge
go_threads 18
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 2.44
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 100
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 10
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 1000
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1001
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 1002
# HELP process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.
# TYPE process_virtual_memory_max_bytes gauge
process_virtual_memory_max_bytes 1003
# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.
# TYPE promhttp_metric_handler_requests_in_flight gauge
promhttp_metric_handler_requests_in_flight 1
# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.
    # TYPE promhttp_metric_handler_requests_total counter
promhttp_metric_handler_requests_total{code="200"} 3
promhttp_metric_handler_requests_total{code="500"} 4
promhttp_metric_handler_requests_total{code="503"} 5